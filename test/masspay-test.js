/*

 Tests for node-paypal-masspay
 Created By: Matt Walters
 Date: 3/2/2012

 Note: tests require the following environment variables to be set:

  process.env.PAYPAL_PWD - paypal API password (generated by PayPal)
  process.env.PAYPAL_USER - paypal user
  process.env.PAYPAL_SIGNATURE - paypal API signature
  process.env.PAYPAL_EMAILSUBJECT - optional email subject to appear on your outgoing mails

*/

var vows = require('vows'),
    assert = require('assert'),
    _ = require('underscore');

var MassPay = require('../index');

var paymentRequests = [
  {
    email: 'matt@gochime.com'
    , amount: '1.5'
    , uniqueId: '12345'
    , note: 'request for matt@gc'
  }
, {
    email: 'tim@gochime.com'
    , amount: '1.75'
    , uniqueId: '123456'
    , note: 'request for tim@gc'
  }
];


var badPaymentRequests = [
  {
    email: 'badEmailAddress'
    , amount: '1.5'
    , uniqueId: '12345'
    , note: 'request for matt@gc'
  }
, {
    email: 'tim@gochime.com'
    , amount: '1.75'
    , uniqueId: '123456'
    , note: 'request for tim@gc'
  }
];

vows
  .describe('MassPay')
    .addBatch({
        'The MassPay API': {
        topic: new MassPay({
            pwd: process.env.PAYPAL_PWD
            , user: process.env.PAYPAL_USER
            , signature: process.env.PAYPAL_SIGNATURE
            , emailsubject: process.env.PAYPAL_EMAILSUBJECT
        }),
        'Pay method calls PayPal remote gateway / API with proper input': {
            topic: function (mp) {
                var batch = new MassPay.PaymentBatch(paymentRequests);
                mp.pay(batch, this.callback);
            },
            "and returns a status code of 'Success'": function (err, result) {
              assert.isNull(err);
              assert.notEqual('Failure', result.ACK);
              assert.equal('Success', result.ACK);
              assert.isNotNull(result.CORRELATIONID);
            }
        },
        'Pay method calls PayPal remote gateway / API with incorrect input': {
            topic: function (mp) {
                var batch = new MassPay.PaymentBatch(badPaymentRequests);
                mp.pay(batch, this.callback);
            },
            "and returns a status code of 'Failure'": function (err, result) {
              assert.isTrue(result === undefined);
              assert.equal('Failure', err.ACK);
              assert.notEqual('Success', err.ACK);
            }
        }
      }
    })
    .export(module); // Export the Suite